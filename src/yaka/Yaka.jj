/*
 *
 *  Auteur: Pedrono Marie-Jo
 *
 * 	création : 13 février 2002
 *
 *  nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)

package yaka;

import operation.*;

public class Yaka {
  public static Declaration declaration;
  public static TabIdent tabIdent;
  public static Expression expression;
  public static YVM yvm;
  public static Constante constante;

  public static void main(String args[]) { 
    Yaka analyseur;
    Yaka.declaration = new Declaration();
    Yaka.expression = new Expression();
    Yaka.tabIdent = new TabIdent(2);
    Yaka.yvm = new YVM();
    Yaka.constante = new Constante();
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAMME> <ident>	
   bloc()
   <FPROGRAMME> 
}

void bloc() : {}{
 (declConst())*
 (declVar())*		
   suiteExpr() 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  (<ident> { Yaka.declaration.nouvelleConstante(YakaTokenManager.identLu); })
   "=" valConst()
    
}

void valConst() : {}{
  (<entier> { Yaka.declaration.majValeur(YakaTokenManager.entierLu); })
 | (<ident>	{ Yaka.declaration.majValeur(YakaTokenManager.identLu); })
 | (<VRAI>  { Yaka.declaration.majValeur(true); })
 | (<FAUX>  { Yaka.declaration.majValeur(false); })
}


void declVar() : {}
{
  <VAR> type()	
  (<ident> { Yaka.declaration.nouvelleVariable(YakaTokenManager.identLu); })
  ("," 
      (<ident> { Yaka.declaration.nouvelleVariable(YakaTokenManager.identLu); }) 
  )* ";"
	
}

void type() :{}
{
   (<ENTIER> { Yaka.declaration.majType(Yaka.constante.ENTIER); })			
 | (<BOOLEEN> { Yaka.declaration.majType(Yaka.constante.BOOLEEN); })
}
/*
 * Syntaxe des instructions.
 */
void suiteExpr() : {}
{ (expression() (";" (expression())? )*)? }

/* void suiteInstr() : {}
{
instruction()
(";" (instruction)? )*
}  
*/

void instruction() : {}
{
	affectation() | lecture() | ecriture()
}

void affectation() : {}
{
	<ident> "=" expression()
}

void lecture() : {}
{
	<LIRE> "(" <ident> ")"
}

void ecriture() : {}
{
	(<ECRIRE> "(" (expression() | <chaine>) ")") | <ALALIGNE>
}

/*
 * Expression.
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() { Yaka.expression.faireOperation(); }
  )?
}



void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme() { Yaka.expression.faireOperation(); }
   )*
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur() { Yaka.expression.faireOperation(); }
  )*
}
void facteur() : {}
{   primaire() 
  |  (opNeg() primaire() { Yaka.expression.faireOperation(); })
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{
    (<entier> { Yaka.expression.ajouteValeur(YakaTokenManager.entierLu); })
  | (<ident> { Yaka.expression.ajouteValeur(YakaTokenManager.identLu); })
  | (<VRAI> { Yaka.expression.ajouteValeur(true); })
  | (<FAUX> { Yaka.expression.ajouteValeur(false); })
}

void opRel() : {}
{
    ("=" { Yaka.expression.ajouteOperation(new Egal()); })
  | ("<>" { Yaka.expression.ajouteOperation(new Diff()); })
  | ("<" { Yaka.expression.ajouteOperation(new Inf()); })	
  | ("<=" { Yaka.expression.ajouteOperation(new InfEgal()); })
  | (">" { Yaka.expression.ajouteOperation(new Sup()); })
  | (">=" { Yaka.expression.ajouteOperation(new SupEgal()); })
} 

void opAdd() : {}
{
    ("+" { Yaka.expression.ajouteOperation(new Add()); })
  | ("-" { Yaka.expression.ajouteOperation(new Sub()); })
  | (<OU> { Yaka.expression.ajouteOperation(new Or()); })
}

void opMul() : {}
{
  	("*" { Yaka.expression.ajouteOperation(new Mul()); })
  | ("/" { Yaka.expression.ajouteOperation(new Div()); })
  | (<ET> { Yaka.expression.ajouteOperation(new And()); })
} 

void opNeg() : {}
{
	("-" { Yaka.expression.ajouteOperation(new Moins()); })
  | (<NON> { Yaka.expression.ajouteOperation(new Non()); })
}


